apiVersion: v1
kind: Service
metadata:
  name: mysqlservice-open
spec:
  selector:
    app: mysql-open
#    the Service option clusterIP: None lets the Service DNS name resolve directly to the Pod’s IP address.
#   This is optimal when you have only one Pod behind a Service and you don’t intend to increase the number of Pods
  clusterIP: None

#      Cannot connect to mysql externally through LoadBalancer or NodePort -> it would work for the local app only through CLusterIp
# However using micro Cloud SQL DB now -> saves a lot of trouble -> do not need (persistent Volume, need at least small instances in my cluster, micro does not work -> expensive 40 bucks a month!
#       type: NodePort
       #  ports:
       #    - port: 3306
       #      nodePort: 30080
       #      name: http
---
apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: mysql-open
spec:
  selector:
    matchLabels:
      app: mysql-open
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-open
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass-root
              key: password

#          kubectl create secret generic mysql-pass-pods --from-literal=password=logitech95  --from-literal=username=teamplaya
#          kubectl create secret generic mysql-pass-root --from-literal=password=logitech
        - name: MYSQL_DATABASE
          value: freshwater

        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-pass-pods
              key: username

        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass-pods
              key: password

        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim-open

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim-open
spec:
#  Wenn kein storageClassName angegeben wird, nimmt er (falls konfiguriert) die default storage class -> dynamically provioning
# kubectl describe storageclass standard
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

---

kind: PersistentVolume
apiVersion: v1
metadata:
  name: mysql-pv-volume-open
#  Storage configured with a group ID (GID) allows writing only by Pods using the same GID
#GID is automatically added to any Pod that uses the PersistentVolume.
#  annotations:
#      pv.beta.kubernetes.io/gid: "1234"
  labels:
    type: local
spec:
#  VolumeClaim has to specify same name ("manual") to be bound to this persist Volume    -> identifier!
  storageClassName: manual
  capacity:
    storage: 5Gi
#    Only one node can access this persistent storage
  accessModes:
    - ReadWriteOnce
#    Host Path -> I created this path on my single node in the minikube cluster -> only for Dev
#    Production: use remote network storage like Elastic Block Storage
# type DirectoryOrCreate: If directory does not exists on node/host create it! -> variefied via minikube ssh and really there!
#  hostPath:
#    path: "/tmp/storage"
#    type: DirectoryOrCreate
#https://docs.openshift.org/latest/install_config/persistent_storage/persistent_storage_gce.html
  gcePersistentDisk:
    fsType: "ext4"
    pdName: "mysql-disk"
