apiVersion: v1
kind: Service
metadata:
  name: mysqlservice
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
#    the Service option clusterIP: None lets the Service DNS name resolve directly to the Pod’s IP address.
#   This is optimal when you have only one Pod behind a Service and you don’t intend to increase the number of Pods
  clusterIP: None


---
apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
       - name: MYSQL_ROOT_PASSWORD
         valueFrom:
           secretKeyRef:
             name: mysql-pass-root
             key: password

#          kubectl create secret generic mysql-pass-pods --from-literal=password=logitech95  --from-literal=username=teamplaya
#          kubectl create secret generic mysql-pass-root --from-literal=password=logitech
       - name: MYSQL_DATABASE
         value: freshwater

       - name: MYSQL_USER
         valueFrom:
           secretKeyRef:
             name: mysql-pass-pods
             key: username

       - name: MYSQL_PASSWORD
         valueFrom:
           secretKeyRef:
             name: mysql-pass-pods
             key: password

        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  selector:
    matchLabels:
      app: jerseystarterpod
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is
      # generated from the deployment name
      labels:
        app: jerseystarterpod
    spec:
      containers:
      - name: webapp
        image: teamplaya/tomcatbitnami
        ports:
        #       Tomcat is configured to start on port 9000
        - containerPort: 9000

        env:
          - name: CATALINA_OPTS
            value: "-XshowSettings -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -DTOMCAT_CONNECTION_PORT=9000 -DTOMCAT_PASSWORD=password -DTOMCAT_USERNAME=admin"

          - name: JAVA_OPTS
#          connect to mysql db through DNS resolution of headless service with name "mysqlservice"
            value: "-DDB_URL=jdbc:mysql://mysqlservice:3306/freshwater -DDB_User=teamplaya -DDB_Password=Logitech"

          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName

          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name

          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace

          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP

          - name: MY_POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName

apiVersion: v1
kind: Service
metadata:
  name: external-service
  labels:
    run: external-service
spec:
  ports:
  - port: 9000
    protocol: TCP
#  type: LoadBalancer
  type: NodePort
  selector:
    app: jerseystarterpod

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

---

kind: PersistentVolume
apiVersion: v1
metadata:
  name: mysql-pv-volume
#  Storage configured with a group ID (GID) allows writing only by Pods using the same GID
#GID is automatically added to any Pod that uses the PersistentVolume.
  annotations:
      pv.beta.kubernetes.io/gid: "1234"
  labels:
    type: local
spec:
#  VolumeClaim has to specify same name ("manual") to be bound to this persist Volume    -> identifier!
  storageClassName: manual
  capacity:
    storage: 3Gi
#    Only one node can access this persistent storage
  accessModes:
    - ReadWriteOnce
#    Host Path -> I created this path on my single node in the minikube cluster -> only for Dev
#    Production: use remote network storage like Elastic Block Storage
# type DirectoryOrCreate: If directory does not exists on node/host create it! -> variefied via minikube ssh and really there!
  hostPath:
    path: "/tmp/storage"
    type: DirectoryOrCreate